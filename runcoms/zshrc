#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

export NVM_DIR="/Users/ben/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

if [[ $(uname) == Linux ]]; then
  export PATH="$HOME/.linuxbrew/bin:$PATH"
  export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
  export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
fi

export PATH=$PATH:/Users/ben/Software/activator-1.3.2-minimal
export PATH=/usr/local/opt/ruby/bin:$PATH
export ANDROID_HOME=/usr/local/opt/android-sdk
export LESS="MR"
export EDITOR=/usr/local/bin/micro

export GENYMOTION_APP=/Applications/Genymotion.app
export GENYMOTION_SHELL=/Applications/Genymotion\ Shell.app

if [ -s "${ZDOTDIR:-$HOME}/.private" ]; then
  source "${ZDOTDIR:-$HOME}/.private"
fi

if [ -s $(jump-bin --zsh-integration) ]; then
  source $(jump-bin --zsh-integration)
fi

. `brew --prefix`/etc/profile.d/z.sh

alias lslt="ls -lt"
alias a="atom ."
alias sc="steroids connect"
alias sd="steroids deploy"
alias ifl="googler -j"
alias goog="googler"
alias micro-dev="~/Dev/Software/micro"
alias open-latest='open "`ls -t | head -n1`"'

# Arc-specific aliases
alias mount-arc="mkdir /Volumes/DATA && mount_smbfs //ArcPub@arcsvr/DATA /Volumes/DATA"

# File suffix aliases
alias -s md=msee

function za() {
  z $@ && a
}

function npm-uds() {
  npm update "$@" && npm dedupe && npm shrinkwrap --dev
}

setopt AUTO_CD

setopt RM_STAR_WAIT

###-tns-completion-start-###
if [ -f /Users/ben/.tnsrc ]; then
  source /Users/ben/.tnsrc
fi
###-tns-completion-end-###

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#
# for BASH
if type complete &>/dev/null; then
    _npm_completion () {
        local words cword
        if type _get_comp_words_by_ref &>/dev/null; then
            _get_comp_words_by_ref -n = -n @ -w words -i cword
        else
            cword="$COMP_CWORD"
            words=("${COMP_WORDS[@]}")
        fi

        local si="$IFS"


        # if your npm command includes `install` or `i `
        if [[ ${words[@]} =~ 'install' ]] || [[ ${words[@]} =~ 'i ' ]]; then
            local cur=${COMP_WORDS[COMP_CWORD]}

            # supply autocomplete words from `~/.npm`, with $cur being value of current expansion like 'expre'
            COMPREPLY=( $( compgen -W "$(ls ~/.npm )" -- $cur ) )
        else
            IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                COMP_LINE="$COMP_LINE" \
                COMP_POINT="$COMP_POINT" \
                npm completion -- "${words[@]}" \
                2>/dev/null)) || return $?
        fi

        IFS="$si"
    }
    complete -o default -F _npm_completion npm
# for ZSH
elif type compdef &>/dev/null; then
    _npm_completion() {
        local si=$IFS


        # if your npm command includes `install`
        if [[ ${words} =~ 'install' ]] || [[ ${words} =~ 'i ' ]]; then
            compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                COMP_LINE=$BUFFER \
                COMP_POINT=0 \
                ls ~/.npm -- "${words[@]}" \
                2>/dev/null)

        else
            compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                COMP_LINE=$BUFFER \
                COMP_POINT=0 \
                npm completion -- "${words[@]}" \
                2>/dev/null)
        fi

        IFS=$si
    }
    compdef _npm_completion npm
elif type compctl &>/dev/null; then

    _npm_completion () {
        local cword line point words si
        read -Ac words
        read -cn cword
        let cword-=1
        read -l line
        read -ln point
        si="$IFS"
        IFS=$'\n' reply=($(COMP_CWORD="$cword" \
            COMP_LINE="$line" \
            COMP_POINT="$point" \
            npm completion -- "${words[@]}" \
            2>/dev/null)) || return $?
        IFS="$si"
    }
    compctl -K _npm_completion npm
fi
###-end-npm-completion-###

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
